{"version":3,"file":"hello_near.js","sources":["../node_modules/.pnpm/near-sdk-js@0.7.0_@types+node@16.18.36/node_modules/near-sdk-js/lib/utils.js","../node_modules/.pnpm/@scure+base@1.1.1/node_modules/@scure/base/lib/esm/index.js","../node_modules/.pnpm/near-sdk-js@0.7.0_@types+node@16.18.36/node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/.pnpm/near-sdk-js@0.7.0_@types+node@16.18.36/node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/.pnpm/near-sdk-js@0.7.0_@types+node@16.18.36/node_modules/near-sdk-js/lib/api.js","../node_modules/.pnpm/near-sdk-js@0.7.0_@types+node@16.18.36/node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/.pnpm/near-sdk-js@0.7.0_@types+node@16.18.36/node_modules/near-sdk-js/lib/promise.js","../src/helper.ts","../src/Enums/JobStatus.ts","../src/Services/JobService.ts","../src/Services/EvaluateService.ts","../src/index.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import { assert } from \"./utils\";\nimport * as near from \"./api\";\n/**\n * A promise action which can be executed on the NEAR blockchain.\n */\nexport class PromiseAction {\n}\n/**\n * A create account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class CreateAccount extends PromiseAction {\n    add(promiseIndex) {\n        near.promiseBatchActionCreateAccount(promiseIndex);\n    }\n}\n/**\n * A deploy contract promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeployContract extends PromiseAction {\n    /**\n     * @param code - The code of the contract to be deployed.\n     */\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeployContract(promiseIndex, this.code);\n    }\n}\n/**\n * A function call promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCall extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCall(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call weight promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeight extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeight(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A function call weight raw promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeightRaw extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeightRaw(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A transfer promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Transfer extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    constructor(amount) {\n        super();\n        this.amount = amount;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionTransfer(promiseIndex, this.amount);\n    }\n}\n/**\n * A stake promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Stake extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    constructor(amount, publicKey) {\n        super();\n        this.amount = amount;\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionStake(promiseIndex, this.amount, this.publicKey.data);\n    }\n}\n/**\n * A add full access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddFullAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFullAccess(promiseIndex, this.publicKey.data, this.nonce);\n    }\n}\n/**\n * A add access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, allowance, receiverId, functionNames, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.allowance = allowance;\n        this.receiverId = receiverId;\n        this.functionNames = functionNames;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFunctionCall(promiseIndex, this.publicKey.data, this.nonce, this.allowance, this.receiverId, this.functionNames);\n    }\n}\n/**\n * A delete key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to delete from the account.\n     */\n    constructor(publicKey) {\n        super();\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteKey(promiseIndex, this.publicKey.data);\n    }\n}\n/**\n * A delete account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteAccount extends PromiseAction {\n    /**\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    constructor(beneficiaryId) {\n        super();\n        this.beneficiaryId = beneficiaryId;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteAccount(promiseIndex, this.beneficiaryId);\n    }\n}\nclass PromiseSingle {\n    constructor(accountId, actions, after, promiseIndex) {\n        this.accountId = accountId;\n        this.actions = actions;\n        this.after = after;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const promiseIndex = this.after\n            ? near.promiseBatchThen(this.after.constructRecursively(), this.accountId)\n            : near.promiseBatchCreate(this.accountId);\n        this.actions.forEach((action) => action.add(promiseIndex));\n        this.promiseIndex = promiseIndex;\n        return promiseIndex;\n    }\n}\nexport class PromiseJoint {\n    constructor(promiseA, promiseB, promiseIndex) {\n        this.promiseA = promiseA;\n        this.promiseB = promiseB;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const result = near.promiseAnd(this.promiseA.constructRecursively(), this.promiseB.constructRecursively());\n        this.promiseIndex = result;\n        return result;\n    }\n}\n/**\n * A high level class to construct and work with NEAR promises.\n */\nexport class NearPromise {\n    /**\n     * @param subtype - The subtype of the promise.\n     * @param shouldReturn - Whether the promise should return.\n     */\n    constructor(subtype, shouldReturn) {\n        this.subtype = subtype;\n        this.shouldReturn = shouldReturn;\n    }\n    /**\n     * Creates a new promise to the provided account ID.\n     *\n     * @param accountId - The account ID on which to call the promise.\n     */\n    static new(accountId) {\n        const subtype = new PromiseSingle(accountId, [], null, null);\n        return new NearPromise(subtype, false);\n    }\n    addAction(action) {\n        if (this.subtype instanceof PromiseJoint) {\n            throw new Error(\"Cannot add action to a joint promise.\");\n        }\n        this.subtype.actions.push(action);\n        return this;\n    }\n    /**\n     * Creates a create account promise action and adds it to the current promise.\n     */\n    createAccount() {\n        return this.addAction(new CreateAccount());\n    }\n    /**\n     * Creates a deploy contract promise action and adds it to the current promise.\n     *\n     * @param code - The code of the contract to be deployed.\n     */\n    deployContract(code) {\n        return this.addAction(new DeployContract(code));\n    }\n    /**\n     * Creates a function call promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCall(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCall(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCallRaw(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCallRaw(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call weight promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The utf-8 string arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeight(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeight(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a function call weight raw promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeightRaw(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeightRaw(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a transfer promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    transfer(amount) {\n        return this.addAction(new Transfer(amount));\n    }\n    /**\n     * Creates a stake promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    stake(amount, publicKey) {\n        return this.addAction(new Stake(amount, publicKey));\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     */\n    addFullAccessKey(publicKey) {\n        return this.addFullAccessKeyWithNonce(publicKey, 0n);\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    addFullAccessKeyWithNonce(publicKey, nonce) {\n        return this.addAction(new AddFullAccessKey(publicKey, nonce));\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     */\n    addAccessKey(publicKey, allowance, receiverId, functionNames) {\n        return this.addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, 0n);\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, nonce) {\n        return this.addAction(new AddAccessKey(publicKey, allowance, receiverId, functionNames, nonce));\n    }\n    /**\n     * Creates a delete key promise action and adds it to the current promise.\n     *\n     * @param publicKey - The public key to delete from the account.\n     */\n    deleteKey(publicKey) {\n        return this.addAction(new DeleteKey(publicKey));\n    }\n    /**\n     * Creates a delete account promise action and adds it to the current promise.\n     *\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    deleteAccount(beneficiaryId) {\n        return this.addAction(new DeleteAccount(beneficiaryId));\n    }\n    /**\n     * Joins the provided promise with the current promise, making the current promise a joint promise subtype.\n     *\n     * @param other - The promise to join with the current promise.\n     */\n    and(other) {\n        const subtype = new PromiseJoint(this, other, null);\n        return new NearPromise(subtype, false);\n    }\n    /**\n     * Adds a callback to the current promise.\n     *\n     * @param other - The promise to be executed as the promise.\n     */\n    then(other) {\n        assert(other.subtype instanceof PromiseSingle, \"Cannot callback joint promise.\");\n        assert(other.subtype.after === null, \"Cannot callback promise which is already scheduled after another\");\n        other.subtype.after = this;\n        return other;\n    }\n    /**\n     * Sets the shouldReturn field to true.\n     */\n    asReturn() {\n        this.shouldReturn = true;\n        return this;\n    }\n    /**\n     * Recursively goes through the current promise to get the promise index.\n     */\n    constructRecursively() {\n        const result = this.subtype.constructRecursively();\n        if (this.shouldReturn) {\n            near.promiseReturn(result);\n        }\n        return result;\n    }\n    /**\n     * Called by NearBindgen, when return object is a NearPromise instance.\n     */\n    onReturn() {\n        this.asReturn().constructRecursively();\n    }\n}\n","import { near } from 'near-sdk-js';\n\nexport function executeWithReset(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args: any[]) {\n        this.resetProperty();\n        return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n}\n\nexport function responseData(data): string\n{\n    return JSON.stringify({\n        status: true,\n        data: data,\n    });\n}\n\nexport function responseMessage(status, message): string\n{\n    return JSON.stringify({\n        status: status,\n        message: message,\n    });\n}\n\nexport function updateObject(originalObject, newObject) {\n    for (const key in newObject) {\n        if (newObject.hasOwnProperty(key)) {\n            originalObject[key] = newObject[key];\n        }\n    }\n}\n\nexport function now(): Date\n{\n    return new Date(Number(near.blockTimestamp()) / 1000000);\n}","enum JobStatus\r\n{\r\n    WAITING,\r\n    PROCESSING,\r\n    PENDING,\r\n    STOPPED,\r\n    PAID,\r\n    OVERDUE,\r\n}\r\n\r\nexport default JobStatus;","import JobStatus from \"../Enums/JobStatus\";\r\n\r\nexport function allStatusFailExcept(status, exceptStatus)\r\n{\r\n    if (Array.isArray(exceptStatus)) {\r\n        if (exceptStatus.includes(status)) {\r\n            return true;\r\n        }\r\n\r\n        return 'This job is not finish';\r\n    }\r\n\r\n    if (status === exceptStatus) {\r\n        return true;\r\n    }\r\n\r\n    switch (status) {\r\n        case JobStatus.WAITING:\r\n            return 'This job is still waiting';\r\n        case JobStatus.PROCESSING:\r\n            return 'This job is still processing';\r\n        case JobStatus.PENDING:\r\n            return 'This job is pending for the recruiter send money';\r\n        case JobStatus.STOPPED:\r\n            return 'This job is stopped already';\r\n        case JobStatus.PAID:\r\n            return 'This job is paid already';\r\n        case JobStatus.OVERDUE:\r\n            return 'This job is overdue already';\r\n    }\r\n}","import Job from \"../Models/Job\";\r\n\r\nexport function checkStarRating(rating)\r\n{\r\n    return /^([0-5](\\.\\d)?)$/.test(rating.toString());\r\n}\r\n\r\nexport function includeReputationToJob(job: Job)\r\n{\r\n    const evaluates = this.evaluateUsers.filter(e => e.job.id === job.id && e.evaluatorUser.id !== job.creator.id);\r\n    const star = evaluates.reduce((acc, evaluateUser) => acc + evaluateUser.star, 0) / evaluates.length;\r\n\r\n    return {\r\n        ...job,\r\n        star,\r\n    };\r\n}","import {executeWithReset, now, responseData, responseMessage, updateObject} from './helper';\r\nimport {call, near, NearBindgen, NearPromise, view} from 'near-sdk-js';\r\nimport Job from \"./Models/Job\";\r\nimport User from \"./Models/User\";\r\nimport JobStatus from \"./Enums/JobStatus\";\r\nimport JobUser from \"./Models/JobUser\";\r\nimport {allStatusFailExcept} from \"./Services/JobService\";\r\nimport EvaluateUser from \"./Models/EvaluateUser\";\r\nimport {checkStarRating, includeReputationToJob} from \"./Services/EvaluateService\";\r\n\r\n\r\n@NearBindgen({})\r\nclass Main\r\n{\r\n    jobs: Job[] = [];\r\n    users: User[] = [];\r\n    jobUsers: JobUser[] = [];\r\n    evaluateUsers: EvaluateUser[] = [];\r\n\r\n    @view({})\r\n    @executeWithReset\r\n    GetJob({ id, title, category, status, creatorId }): string\r\n    {\r\n        if (id != null) {\r\n            const jobIndex = this.jobs.findIndex(e => e.id === id);\r\n            if (jobIndex === -1) {\r\n                return responseMessage(false, 'Not find job.');\r\n            }\r\n\r\n            return responseData(this.includeReputationToJob(this.jobs[jobIndex]));\r\n        }\r\n\r\n        return responseData(this.jobs.filter(e => {\r\n            let matchTitle = true;\r\n            let matchCategory = true;\r\n            let matchStatus = true;\r\n            let matchCreator = true;\r\n\r\n            if (title != null) {\r\n                matchTitle = e.title.includes(title);\r\n            }\r\n            if (category != null) {\r\n                matchCategory = e.categories.includes(category);\r\n            }\r\n            if (status != null) {\r\n                matchStatus = e.status === status;\r\n            }\r\n            if (creatorId != null) {\r\n                matchCreator = e.creator.id === creatorId;\r\n            }\r\n\r\n            return matchTitle && matchCategory && matchStatus && matchCreator;\r\n        }).map((job) => this.includeReputationToJob(job)));\r\n    }\r\n\r\n    includeReputationToJob(job: Job)\r\n    {\r\n        const evaluates = this.evaluateUsers.filter(e => e.job.id === job.id && e.evaluatorUser.id !== job.creator.id);\r\n        const star = evaluates.reduce((acc, evaluateUser) => acc + evaluateUser.star, 0) / evaluates.length;\r\n\r\n        return {\r\n            ...job,\r\n            star,\r\n        };\r\n    }\r\n\r\n    @view({})\r\n    @executeWithReset\r\n    GetUser({ id, name, accountId })\r\n    {\r\n        if (id != null) {\r\n            const jobIndex = this.users.findIndex(e => e.id === id);\r\n            if (jobIndex === -1) {\r\n                return responseMessage(false, 'Not find user.');\r\n            }\r\n\r\n            return responseData(this.users[jobIndex]);\r\n        }\r\n        if (accountId != null) {\r\n            const jobIndex = this.users.findIndex(e => e.accountId === accountId);\r\n            if (jobIndex === -1) {\r\n                return responseMessage(false, 'Not find user.');\r\n            }\r\n\r\n            return responseData(this.users[jobIndex]);\r\n        }\r\n\r\n        return responseData(this.users.filter(e => {\r\n            let matchName = true;\r\n\r\n            if (name != null) {\r\n                matchName = e.name.includes(name);\r\n            }\r\n\r\n            return matchName;\r\n        }));\r\n    }\r\n\r\n    @call({})\r\n    @executeWithReset\r\n    CreateJob({ title, description, categories, money }): string\r\n    {\r\n        this.jobs.push({\r\n            id: this.jobs.length + 1,\r\n            title: title,\r\n            description: description,\r\n            categories: categories,\r\n            money: money,\r\n            status: JobStatus.WAITING,\r\n            creator: this.authed(),\r\n            createdAt: now(),\r\n            startedAt: undefined,\r\n            finishedAts: undefined,\r\n            freelancer: undefined,\r\n            deadline: undefined,\r\n        });\r\n\r\n        return responseMessage(true, 'Create Job successfully');\r\n    }\r\n\r\n    @call({})\r\n    UpdateJob({ id, title, description, categories, money }): string\r\n    {\r\n        const jobIndex = this.findJobIndexOrFail(id, true);\r\n        if (typeof jobIndex !== 'number') return jobIndex;\r\n\r\n        updateObject(this.jobs[jobIndex], {title, description, categories, money});\r\n\r\n        return responseMessage(true, 'Update Job successfully');\r\n    }\r\n\r\n    @call({})\r\n    DeleteJob({ id }): string\r\n    {\r\n        const jobIndex = this.findJobIndexOrFail(id, true);\r\n        if (typeof jobIndex !== 'number') return jobIndex;\r\n\r\n        this.jobs.splice(jobIndex, 1);\r\n\r\n        return responseMessage(true, 'Delete Job successfully');\r\n    }\r\n\r\n    @call({})\r\n    @executeWithReset\r\n    RegisterJob({ id, message }): string\r\n    {\r\n        const jobIndex = this.findJobIndexOrFail(id);\r\n        if (typeof jobIndex !== 'number') return jobIndex;\r\n\r\n        const user = this.authed();\r\n        if (! this.jobUsers.find(e => e.job.id === id && e.user.id === user.id)) {\r\n            this.jobUsers.push({\r\n                job: this.jobs[jobIndex],\r\n                user: user,\r\n                message: message,\r\n                createdAt: now(),\r\n            });\r\n\r\n            return responseMessage(true, 'Register successfully');\r\n        }\r\n\r\n        return responseMessage(false, 'You have registered this job before');\r\n    }\r\n\r\n    @view({})\r\n    @executeWithReset\r\n    GetJobRegister({ id }): string\r\n    {\r\n        return responseData(\r\n            this.jobUsers\r\n                .filter(e => e.job.id === id)\r\n                .map(({ user, message, createdAt }) => ({ user, message, createdAt }))\r\n        );\r\n    }\r\n\r\n    @view({})\r\n    @executeWithReset\r\n    GetJobRegisteredByUser({ id }): string\r\n    {\r\n        return responseData(\r\n            this.jobUsers\r\n                .filter(e => e.user.id === id)\r\n                .map(({ job, message, createdAt }) => ({ job, message, createdAt }))\r\n        );\r\n    }\r\n\r\n    @call({})\r\n    ChooseFreelancer({ userId, jobId }): string\r\n    {\r\n        const jobIndex = this.findJobIndexOrFail(jobId, true);\r\n        if (typeof jobIndex !== 'number') return jobIndex;\r\n\r\n        const jobUser = this.jobUsers.find(e => e.user.id === userId && e.job.id === jobId);\r\n        if (jobUser == null) {\r\n            return responseMessage(false, 'This user not register this job');\r\n        }\r\n        let freelancer = this.jobs[jobIndex].freelancer;\r\n        if (freelancer != null) return responseMessage(false, `You have chose ${freelancer.accountId} for doing this job.`);\r\n\r\n        this.jobs[jobIndex].freelancer = jobUser.user;\r\n\r\n        return responseMessage(true, 'Choose freelancer successfully');\r\n    }\r\n\r\n    @call({})\r\n    SetJobDeadline({ jobId, deadline }): string\r\n    {\r\n        const jobIndex = this.findJobIndexOrFail(jobId, true);\r\n        if (typeof jobIndex !== 'number') return jobIndex;\r\n\r\n        const job = this.jobs[jobIndex];\r\n        if (job.freelancer == null) {\r\n            return responseMessage(false, 'There is no freelancer, please choose one then set deadline');\r\n        }\r\n\r\n        job.status = JobStatus.PROCESSING;\r\n        job.startedAt = job.startedAt || now();\r\n        job.deadline = new Date(deadline);\r\n\r\n        return responseMessage(true, 'Set deadline successfully');\r\n    }\r\n\r\n    @call({})\r\n    SendPaymentRequest({ id }): string\r\n    {\r\n        const jobIndex = this.findJobIndexOrFail(id, false, true);\r\n        if (typeof jobIndex !== 'number') return jobIndex;\r\n\r\n        const job = this.jobs[jobIndex];\r\n\r\n        const checkJobStatus = allStatusFailExcept(job.status, JobStatus.PROCESSING);\r\n        if (checkJobStatus !== true) return responseMessage(false, checkJobStatus);\r\n\r\n        job.status = JobStatus.PENDING;\r\n        job.finishedAts = job.finishedAts || [];\r\n        job.finishedAts.push(now());\r\n\r\n        return responseMessage(true, 'Send payment request successfully');\r\n    }\r\n\r\n    @call({ payableFunction: true })\r\n    VerifyPaymentRequest({ id })\r\n    {\r\n        const jobIndex = this.findJobIndexOrFail(id, true);\r\n        if (typeof jobIndex !== 'number') return jobIndex;\r\n\r\n        const job = this.jobs[jobIndex];\r\n        const checkJobStatus = allStatusFailExcept(job.status, JobStatus.PENDING);\r\n        if (checkJobStatus !== true) return responseMessage(false, checkJobStatus);\r\n\r\n        job.status = JobStatus.PAID;\r\n\r\n        return NearPromise.new(job.freelancer.accountId).transfer(BigInt(job.money * 1000000000000000000000000))\r\n    }\r\n\r\n    @call({})\r\n    Evaluate({ userId, jobId, star, message })\r\n    {\r\n        if (! checkStarRating(star)) return responseMessage(false, 'Invalid star rating, star should be 0~5, only 1 decimal.');\r\n        const evaluator = this.authed();\r\n\r\n        const jobIndex = this.findJobIndexOrFail(jobId);\r\n        if (typeof jobIndex !== 'number') return jobIndex;\r\n\r\n        const job = this.jobs[jobIndex];\r\n        if ((job.freelancer.id !== userId && job.freelancer.id !== evaluator.id) || (job.creator.id !== userId && job.creator.id !== evaluator.id)) {\r\n            return responseMessage(false, 'You do not do this job and you are not the creator of this job.');\r\n        }\r\n        const checkJobStatus = allStatusFailExcept(job.status, [JobStatus.PAID, JobStatus.STOPPED, JobStatus.OVERDUE]);\r\n        if (checkJobStatus !== true) return responseMessage(false, checkJobStatus);\r\n\r\n        const evaluate = this.evaluateUsers.find(e => e.job.id === jobId && e.evaluatorUser.id === evaluator.id && e.evaluatedUser.id === userId);\r\n        if (evaluate != null) {\r\n            return responseMessage(false, 'You have evaluated this already');\r\n        }\r\n        this.evaluateUsers.push({\r\n            evaluatorUser: evaluator,\r\n            evaluatedUser: this.users.find(e => e.id === userId),\r\n            job: job,\r\n            star: star,\r\n            message: message,\r\n            createdAt: now(),\r\n        });\r\n\r\n        return responseMessage(true, 'Evaluate successfully');\r\n    }\r\n\r\n    @call({})\r\n    @executeWithReset\r\n    Register(): string\r\n    {\r\n        this.authed();\r\n\r\n        return responseMessage(true, 'Register successfully');\r\n    }\r\n\r\n    @call({})\r\n    @executeWithReset\r\n    authed(): User\r\n    {\r\n        const accountId = near.signerAccountId();\r\n        let user = this.users.find(e => e.accountId === accountId);\r\n        if (user == null) {\r\n            const countUser = this.users.push({\r\n                id: this.users.length + 1,\r\n                name: undefined,\r\n                rate: 0,\r\n                accountId: accountId,\r\n                createdAt: now(),\r\n            });\r\n            user = this.users[countUser - 1];\r\n        }\r\n\r\n        return user;\r\n    }\r\n\r\n    @call({})\r\n    ResetData(): void\r\n    {\r\n        this.jobs = [];\r\n        this.users = [];\r\n        this.jobUsers = [];\r\n        this.evaluateUsers = [];\r\n    }\r\n\r\n    @view({})\r\n    GetData(): string\r\n    {\r\n        return responseData({\r\n            jobs: this.jobs,\r\n            users: this.users,\r\n            jobUsers: this.jobUsers,\r\n            evaluateUsers: this.evaluateUsers,\r\n        });\r\n    }\r\n\r\n    resetProperty(): void\r\n    {\r\n        this.jobs = this.jobs == null ? [] : this.jobs;\r\n        this.users = this.users == null ? [] : this.users;\r\n        this.jobUsers = this.jobUsers == null ? [] : this.jobUsers;\r\n        this.evaluateUsers = this.evaluateUsers == null ? [] : this.evaluateUsers;\r\n    }\r\n\r\n    findJobIndexOrFail(id: number, isCheckOwner = false, isCheckFreelancer = false)\r\n    {\r\n        const jobIndex = this.jobs.findIndex(e => e.id === id);\r\n        if (jobIndex === -1) {\r\n            return responseMessage(false, 'Not find job.');\r\n        }\r\n        if (isCheckOwner && this.jobs[jobIndex].creator.id !== this.authed().id) {\r\n            return responseMessage(false, 'This job is not yours.');\r\n        }\r\n        if (isCheckFreelancer && (this.jobs[jobIndex]?.freelancer?.id !== this.authed().id)) {\r\n            return responseMessage(false, 'You are not doing this job');\r\n        }\r\n\r\n\r\n        return jobIndex;\r\n    }\r\n\r\n    constructor()\r\n    {\r\n        this.jobs = this.jobs == null ? [] : this.jobs;\r\n        this.users = this.users == null ? [] : this.users;\r\n        this.jobUsers = this.jobUsers == null ? [] : this.jobUsers;\r\n        this.evaluateUsers = this.evaluateUsers == null ? [] : this.evaluateUsers;\r\n    }\r\n\r\n}"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","assert","expression","message","Error","serialize","valueToSerialize","encode","JSON","stringify","key","value","toString","BIGINT","Date","toISOString","DATE","deserialize","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","bytes","s","env","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","utf8_string_to_uint8array","uint8array_to_utf8_string","assertNumber","n","Number","isSafeInteger","chain","args","wrap","b","c","Array","from","reverse","reduce","acc","i","undefined","alphabet","digits","isArray","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","Uint8Array","radix2","revPadding","unsafeWrapper","apply","e","base16","base32","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","signerAccountId","signer_account_id","read_register","predecessorAccountId","predecessor_account_id","currentAccountId","current_account_id","blockTimestamp","block_timestamp","attachedDeposit","attached_deposit","storageReadRaw","returnValue","storage_read","storageWriteRaw","storage_write","inputRaw","promiseAnd","promiseIndexes","promise_and","promiseBatchCreate","accountId","promise_batch_create","promiseBatchThen","promiseIndex","promise_batch_then","promiseBatchActionCreateAccount","promise_batch_action_create_account","promiseBatchActionDeployContract","code","promise_batch_action_deploy_contract","promiseBatchActionFunctionCallRaw","methodName","amount","gas","promise_batch_action_function_call","promiseBatchActionFunctionCall","promiseBatchActionTransfer","promise_batch_action_transfer","promiseBatchActionStake","publicKey","promise_batch_action_stake","promiseBatchActionAddKeyWithFullAccess","nonce","promise_batch_action_add_key_with_full_access","promiseBatchActionAddKeyWithFunctionCall","allowance","receiverId","methodNames","promise_batch_action_add_key_with_function_call","promiseBatchActionDeleteKey","promise_batch_action_delete_key","promiseBatchActionDeleteAccount","beneficiaryId","promise_batch_action_delete_account","promiseBatchActionFunctionCallWeightRaw","weight","promise_batch_action_function_call_weight","promiseBatchActionFunctionCallWeight","promiseReturn","promise_return","view","_empty","_target","_key","_descriptor","call","privateFunction","payableFunction","descriptor","originalMethod","near","NearBindgen","requireInit","serializer","deserializer","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","reconstructor","constructor","reconstruct","_requireInit","PromiseAction","CreateAccount","add","DeployContract","FunctionCall","functionName","FunctionCallRaw","FunctionCallWeight","FunctionCallWeightRaw","Transfer","Stake","AddFullAccessKey","AddAccessKey","functionNames","DeleteKey","DeleteAccount","PromiseSingle","actions","after","constructRecursively","action","PromiseJoint","promiseA","promiseB","result","NearPromise","subtype","shouldReturn","new","addAction","createAccount","deployContract","functionCall","functionCallRaw","functionCallWeight","functionCallWeightRaw","transfer","stake","addFullAccessKey","addFullAccessKeyWithNonce","addAccessKey","addAccessKeyWithNonce","deleteKey","deleteAccount","and","other","then","asReturn","onReturn","executeWithReset","propertyKey","resetProperty","responseData","status","responseMessage","updateObject","originalObject","newObject","hasOwnProperty","now","JobStatus","allStatusFailExcept","exceptStatus","WAITING","PROCESSING","PENDING","STOPPED","PAID","OVERDUE","checkStarRating","rating","test","Main","_dec","_dec2","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_class","_class2","jobs","users","jobUsers","evaluateUsers","GetJob","id","title","category","creatorId","jobIndex","findIndex","includeReputationToJob","filter","matchTitle","matchCategory","matchStatus","matchCreator","categories","creator","job","evaluates","evaluatorUser","star","evaluateUser","GetUser","name","matchName","CreateJob","description","money","authed","createdAt","startedAt","finishedAts","freelancer","deadline","UpdateJob","findJobIndexOrFail","DeleteJob","splice","RegisterJob","user","find","GetJobRegister","GetJobRegisteredByUser","ChooseFreelancer","userId","jobId","jobUser","SetJobDeadline","SendPaymentRequest","checkJobStatus","VerifyPaymentRequest","Evaluate","evaluator","evaluate","evaluatedUser","Register","countUser","rate","ResetData","GetData","isCheckOwner","isCheckFreelancer","_applyDecoratedDescriptor","prototype","getOwnPropertyDescriptor","_state","_contract","_args","_result","value_return"],"mappings":"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"}